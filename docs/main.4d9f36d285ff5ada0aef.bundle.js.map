{"version":3,"file":"main.4d9f36d285ff5ada0aef.bundle.js","sources":["webpack:///./stories/materialUI.js"],"sourcesContent":["import React, { cloneElement } from 'react';\r\nimport { storiesOf } from '@storybook/react';\r\nimport { action } from '@storybook/addon-actions';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { ValidationField, createForm } from '../src';\r\n\r\nconst rules = {\r\n  name: {\r\n    validator: name =>\r\n      new Promise((res, rej) => {\r\n        setTimeout(() => {\r\n          if (name) {\r\n            res(name);\r\n          } else {\r\n            rej(name);\r\n          }\r\n        }, 1000);\r\n      }),\r\n    message: 'Please input your name',\r\n  },\r\n  gender: {\r\n    validator: gender => gender,\r\n    message: 'Please choose your gender',\r\n  },\r\n  job: {\r\n    validator: (job, { age }) => job || !age || age < 20,\r\n    message: 'Please choose your job',\r\n  },\r\n  age: {\r\n    validator: age => age,\r\n    message: 'Please choose your age',\r\n  },\r\n  terms: {\r\n    validator: agree => agree,\r\n    message: ' ',\r\n  },\r\n};\r\n\r\nclass MaterialUIForm extends React.PureComponent {\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { submit } = this.props;\r\n    submit(action('submit-success'), action('submit-fail'))();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isValid,\r\n      isSubmitting,\r\n      isPristine,\r\n      values,\r\n      updateFieldValue,\r\n      initialize,\r\n    } = this.props;\r\n    return (\r\n      <Paper style={{ width: '500px', padding: '40px', margin: '20px' }}>\r\n        <Typography variant=\"h5\">Sign Up</Typography>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <ValidationField name=\"name\" label=\"Name\" isInput>\r\n            <Input />\r\n          </ValidationField>\r\n          <ValidationField name=\"age\" label=\"Age\" isInput>\r\n            <Select>\r\n              <MenuItem value=\"\">None</MenuItem>\r\n              <MenuItem value={10}>Ten</MenuItem>\r\n              <MenuItem value={20}>Twenty</MenuItem>\r\n              <MenuItem value={30}>Thirty</MenuItem>\r\n            </Select>\r\n          </ValidationField>\r\n          {values.age > 10 ? (\r\n            <ValidationField name=\"job\" label=\"Job\" isInput>\r\n              <Select>\r\n                <MenuItem value=\"engineer\">Engineer</MenuItem>\r\n                <MenuItem value=\"doctor\">Doctor</MenuItem>\r\n                <MenuItem value=\"Teacher\">Teacher</MenuItem>\r\n              </Select>\r\n            </ValidationField>\r\n          ) : null}\r\n          <ValidationField\r\n            name=\"gender\"\r\n            label=\"Gender\"\r\n            options=\"custom options\">\r\n            <RadioGroup row>\r\n              <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n              <FormControlLabel\r\n                value=\"female\"\r\n                control={<Radio />}\r\n                label=\"Female\"/>\r\n              <FormControlLabel\r\n                value=\"other\"\r\n                control={<Radio />}\r\n                label=\"Other\"/>\r\n            </RadioGroup>\r\n          </ValidationField>\r\n          <ValidationField name=\"birth\" label=\"Date of birth\">\r\n            <Input label=\"Birthday\" type=\"date\" />\r\n          </ValidationField>\r\n          <ValidationField name=\"terms\" valuePropName=\"checked\">\r\n            <FormControlLabel\r\n              value=\"terms\"\r\n              control={<Switch value=\"terms\" />}\r\n              label=\"I agree to terms\"/>\r\n          </ValidationField>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={!isValid || isSubmitting || !values.terms || isPristine}>\r\n            Next\r\n          </Button>\r\n          <Button\r\n            onClick={initialize}\r\n            color=\"primary\"\r\n            style={{ marginLeft: 10 }}>\r\n            Reset\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={() => updateFieldValue('gender', 'male', true)}\r\n            style={{ marginLeft: 10 }}>\r\n            Set\r\n          </Button>\r\n        </form>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nfunction fieldRender({\r\n  children,\r\n  id,\r\n  error,\r\n  required,\r\n  validating,\r\n  label,\r\n  dataBindProps,\r\n  isInput,\r\n}) {\r\n  const labelNode = isInput ? (\r\n    <InputLabel htmlFor={id}>{label}</InputLabel>\r\n  ) : (\r\n    <FormLabel htmlFor={id}>{label}</FormLabel>\r\n  );\r\n  const input = cloneElement(\r\n    children,\r\n    Object.assign(\r\n      {\r\n        id,\r\n        ...dataBindProps,\r\n      },\r\n      isInput\r\n        ? {\r\n            error: error && error.length > 0,\r\n            endAdornment: validating ? (\r\n              <InputAdornment position=\"end\">\r\n                <CircularProgress size={20} />\r\n                <span />\r\n              </InputAdornment>\r\n            ) : null,\r\n            ...children.props.endAdornment,\r\n          }\r\n        : null,\r\n    ),\r\n  );\r\n  return (\r\n    <FormControl\r\n      fullWidth\r\n      error={error && error.length > 0}\r\n      style={{ marginTop: '6px' }}\r\n      required={required}>\r\n      {labelNode}\r\n      {input}\r\n      <FormHelperText>{error ? error[0] : ''}</FormHelperText>\r\n    </FormControl>\r\n  );\r\n}\r\nconst Demo = createForm(\r\n  {\r\n    birth: '2018-05-28',\r\n    terms: false,\r\n  },\r\n  rules,\r\n  { fieldRender },\r\n)(MaterialUIForm);\r\nstoriesOf('Form with Material-ui', module).add('profile', () => <Demo />);\r\n"],"mappings":"AAsBA","sourceRoot":""}